"""
Django settings for eam_backend project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import yaml

file = open("config.yml", "r", encoding="utf-8")
env = yaml.load(file, Loader=yaml.SafeLoader)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'fcai@x(fk+u$1$xg&#iuqe4+p9t0lij2)!@78uarqjdztuez48'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
key = 'DEPLOY'
value = os.getenv(key)
if value is not None:
    DEBUG = False


ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django_apscheduler',
    'django_celery_results',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'simple_history',
    'Asset',
    'Department',
    'User',
    'mptt',
    'Request',
    'Async'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'eam_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'eam_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
if env["database"]["type"] == "mysql":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": "PROJECT_DATABASE",
            "USER": "root",
            "PASSWORD": "bughunters",
            "HOST": "mysql.BugHunters.secoder.local",
            # "HOST": "172.17.0.2",
            "PORT": 3306,
            "OPTIONS": {"charset": "utf8mb4"},
        },
    }
elif env["database"]["type"] == "postgreSQL":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "PROJECT_DATABASE",
            "USER": "PROJECT_DATABASE",
            "PASSWORD": "bughunters",
            "HOST": "postgreSQL.BugHunters.secoder.local",
            # "HOST": "172.17.0.2",
            "PORT": 5432,
        },
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

CELERY_RESULT_BACKEND = 'django-db' 

CELERY_RESULT_SERIALIZER = 'json' # 结果序列化方案

CELERY_BROKER_URL = 'redis://172.17.0.2:6379/0' # Broker配置，使用Redis作为消息中间件
key = 'DEPLOY'
value = os.getenv(key)
if value is not None:
    CELERY_BROKER_URL = 'redis://redis.BugHunters.secoder.local:6379/0'
# CELERY_BROKER_URL = 'redis://172.17.0.2:6379/0' # Broker配置，使用Redis作为消息中间件
CELERY_BROKER_URL = 'redis://172.17.0.2:6379/0'
# CELERY_BROKER_URL = 'redis://redis-BugHunters.app.secoder.net:6379/0'

CELERY_TASK_TRACK_STARTED = True

CELERY_TASK_TIME_LIMIT = 30 * 60

DJANGO_CELERY_RESULTS_TASK_ID_MAX_LENGTH=191